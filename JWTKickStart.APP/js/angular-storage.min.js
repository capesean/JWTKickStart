// from auth0 on github
!function () { angular.module("angular-storage", ["angular-storage.store"]), angular.module("angular-storage.internalStore", ["angular-storage.storage"]).factory("InternalStore", ["storage", "$log", function (e, t) { function r(e, t) { this.namespace = e || null, this.delimiter = t || ".", this.inMemoryCache = {} } return r.prototype.getNamespacedKey = function (e) { return this.namespace ? [this.namespace, e].join(this.delimiter) : e }, r.prototype.set = function (t, r) { this.inMemoryCache[t] = r, e.set(this.getNamespacedKey(t), JSON.stringify(r)) }, r.prototype.get = function (r) { var n = null; if (r in this.inMemoryCache) return this.inMemoryCache[r]; var o = e.get(this.getNamespacedKey(r)); try { n = "undefined" == typeof o || "undefined" === o ? void 0 : JSON.parse(o), this.inMemoryCache[r] = n } catch (a) { t.error("Error parsing saved value", a), this.remove(r) } return n }, r.prototype.remove = function (t) { this.inMemoryCache[t] = null, e.remove(this.getNamespacedKey(t)) }, r }]), angular.module("angular-storage.storage", []).service("storage", ["$window", "$injector", function (e, t) { if (e.localStorage) this.set = function (t, r) { return e.localStorage.setItem(t, r) }, this.get = function (t) { return e.localStorage.getItem(t) }, this.remove = function (t) { return e.localStorage.removeItem(t) }; else { var r = t.get("$cookieStore"); this.set = function (e, t) { return r.put(e, t) }, this.get = function (e) { return r.get(e) }, this.remove = function (e) { return r.remove(e) } } }]), angular.module("angular-storage.store", ["angular-storage.internalStore"]).factory("store", ["InternalStore", function (e) { var t = new e; return t.getNamespacedStore = function (t, r) { return new e(t, r) }, t }]) }();